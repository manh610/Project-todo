swagger: '2.0'
info:
  version: 1.0.0
  title: todo
  description: todo
basePath: /api
paths:
  '/Todos/{id}/todoDetails/{fk}':
    get:
      tags:
        - Todo
      summary: Find a related item by id for todoDetails.
      operationId: Todo.prototype.__findById__todoDetails
      parameters:
        - name: id
          in: path
          description: Todo id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for todoDetails
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TodoDetail'
      deprecated: false
    delete:
      tags:
        - Todo
      summary: Delete a related item by id for todoDetails.
      operationId: Todo.prototype.__destroyById__todoDetails
      parameters:
        - name: id
          in: path
          description: Todo id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for todoDetails
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Todo
      summary: Update a related item by id for todoDetails.
      operationId: Todo.prototype.__updateById__todoDetails
      parameters:
        - name: id
          in: path
          description: Todo id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for todoDetails
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/TodoDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TodoDetail'
      deprecated: false
  '/Todos/{id}/account':
    get:
      tags:
        - Todo
      summary: Fetches belongsTo relation account.
      operationId: Todo.prototype.__get__account
      parameters:
        - name: id
          in: path
          description: Todo id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  '/Todos/{id}/todoDetails':
    get:
      tags:
        - Todo
      summary: Queries todoDetails of Todo.
      operationId: Todo.prototype.__get__todoDetails
      parameters:
        - name: id
          in: path
          description: Todo id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/TodoDetail'
      deprecated: false
    post:
      tags:
        - Todo
      summary: Creates a new instance in todoDetails of this model.
      operationId: Todo.prototype.__create__todoDetails
      parameters:
        - name: id
          in: path
          description: Todo id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/TodoDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TodoDetail'
      deprecated: false
    delete:
      tags:
        - Todo
      summary: Deletes all todoDetails of this model.
      operationId: Todo.prototype.__delete__todoDetails
      parameters:
        - name: id
          in: path
          description: Todo id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Todos/{id}/todoDetails/count':
    get:
      tags:
        - Todo
      summary: Counts todoDetails of Todo.
      operationId: Todo.prototype.__count__todoDetails
      parameters:
        - name: id
          in: path
          description: Todo id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Todos:
    post:
      tags:
        - Todo
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Todo.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Todo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Todo'
      deprecated: false
    patch:
      tags:
        - Todo
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Todo.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Todo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Todo'
      deprecated: false
    put:
      tags:
        - Todo
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Todo.replaceOrCreate__put_Todos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Todo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Todo'
      deprecated: false
    get:
      tags:
        - Todo
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Todo.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Todo'
      deprecated: false
  /Todos/replaceOrCreate:
    post:
      tags:
        - Todo
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Todo.replaceOrCreate__post_Todos_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Todo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Todo'
      deprecated: false
  /Todos/upsertWithWhere:
    post:
      tags:
        - Todo
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Todo.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Todo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Todo'
      deprecated: false
  '/Todos/{id}/exists':
    get:
      tags:
        - Todo
      summary: Check whether a model instance exists in the data source.
      operationId: 'Todo.exists__get_Todos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Todos/{id}':
    head:
      tags:
        - Todo
      summary: Check whether a model instance exists in the data source.
      operationId: 'Todo.exists__head_Todos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Todo
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Todo.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Todo'
      deprecated: false
    put:
      tags:
        - Todo
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Todo.replaceById__put_Todos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Todo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Todo'
      deprecated: false
    delete:
      tags:
        - Todo
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Todo.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Todo
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Todo.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Todo id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Todo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Todo'
      deprecated: false
  '/Todos/{id}/replace':
    post:
      tags:
        - Todo
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Todo.replaceById__post_Todos_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Todo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Todo'
      deprecated: false
  /Todos/findOne:
    get:
      tags:
        - Todo
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Todo.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Todo'
      deprecated: false
  /Todos/update:
    post:
      tags:
        - Todo
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Todo.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Todo'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Todos/count:
    get:
      tags:
        - Todo
      summary: Count instances of the model matched by where from the data source.
      operationId: Todo.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Todos/change-stream:
    post:
      tags:
        - Todo
      summary: Create a change stream.
      operationId: Todo.createChangeStream__post_Todos_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Todo
      summary: Create a change stream.
      operationId: Todo.createChangeStream__get_Todos_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/Todos/{id}/copy':
    post:
      tags:
        - Todo
      summary: copy
      operationId: Todo.prototype.copy
      parameters:
        - name: id
          in: path
          description: Todo id
          required: true
          type: string
          format: JSON
        - name: customName
          in: query
          description: ''
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: string
      deprecated: false
  '/TodoDetails/{id}/todo':
    get:
      tags:
        - TodoDetail
      summary: Fetches belongsTo relation todo.
      operationId: TodoDetail.prototype.__get__todo
      parameters:
        - name: id
          in: path
          description: TodoDetail id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Todo'
      deprecated: false
  /TodoDetails:
    post:
      tags:
        - TodoDetail
      summary: Create a new instance of the model and persist it into the data source.
      operationId: TodoDetail.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TodoDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TodoDetail'
      deprecated: false
    patch:
      tags:
        - TodoDetail
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: TodoDetail.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TodoDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TodoDetail'
      deprecated: false
    put:
      tags:
        - TodoDetail
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: TodoDetail.replaceOrCreate__put_TodoDetails
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TodoDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TodoDetail'
      deprecated: false
    get:
      tags:
        - TodoDetail
      summary: Find all instances of the model matched by filter from the data source.
      operationId: TodoDetail.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/TodoDetail'
      deprecated: false
  /TodoDetails/replaceOrCreate:
    post:
      tags:
        - TodoDetail
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: TodoDetail.replaceOrCreate__post_TodoDetails_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TodoDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TodoDetail'
      deprecated: false
  /TodoDetails/upsertWithWhere:
    post:
      tags:
        - TodoDetail
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: TodoDetail.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/TodoDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TodoDetail'
      deprecated: false
  '/TodoDetails/{id}/exists':
    get:
      tags:
        - TodoDetail
      summary: Check whether a model instance exists in the data source.
      operationId: 'TodoDetail.exists__get_TodoDetails_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/TodoDetails/{id}':
    head:
      tags:
        - TodoDetail
      summary: Check whether a model instance exists in the data source.
      operationId: 'TodoDetail.exists__head_TodoDetails_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - TodoDetail
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: TodoDetail.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TodoDetail'
      deprecated: false
    put:
      tags:
        - TodoDetail
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'TodoDetail.replaceById__put_TodoDetails_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TodoDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TodoDetail'
      deprecated: false
    delete:
      tags:
        - TodoDetail
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: TodoDetail.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - TodoDetail
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: TodoDetail.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: TodoDetail id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/TodoDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TodoDetail'
      deprecated: false
  '/TodoDetails/{id}/replace':
    post:
      tags:
        - TodoDetail
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'TodoDetail.replaceById__post_TodoDetails_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TodoDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TodoDetail'
      deprecated: false
  /TodoDetails/findOne:
    get:
      tags:
        - TodoDetail
      summary: Find first instance of the model matched by filter from the data source.
      operationId: TodoDetail.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TodoDetail'
      deprecated: false
  /TodoDetails/update:
    post:
      tags:
        - TodoDetail
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: TodoDetail.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/TodoDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /TodoDetails/count:
    get:
      tags:
        - TodoDetail
      summary: Count instances of the model matched by where from the data source.
      operationId: TodoDetail.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /TodoDetails/change-stream:
    post:
      tags:
        - TodoDetail
      summary: Create a change stream.
      operationId: TodoDetail.createChangeStream__post_TodoDetails_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - TodoDetail
      summary: Create a change stream.
      operationId: TodoDetail.createChangeStream__get_TodoDetails_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/Accounts/{id}/accessTokens/{fk}':
    get:
      tags:
        - Account
      summary: Find a related item by id for accessTokens.
      operationId: Account.prototype.__findById__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Account
      summary: Delete a related item by id for accessTokens.
      operationId: Account.prototype.__destroyById__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Account
      summary: Update a related item by id for accessTokens.
      operationId: Account.prototype.__updateById__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Accounts/{id}/todos/{fk}':
    get:
      tags:
        - Account
      summary: Find a related item by id for todos.
      operationId: Account.prototype.__findById__todos
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for todos
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Todo'
      deprecated: false
    delete:
      tags:
        - Account
      summary: Delete a related item by id for todos.
      operationId: Account.prototype.__destroyById__todos
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for todos
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Account
      summary: Update a related item by id for todos.
      operationId: Account.prototype.__updateById__todos
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for todos
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Todo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Todo'
      deprecated: false
  '/Accounts/{id}/accessTokens':
    get:
      tags:
        - Account
      summary: Queries accessTokens of Account.
      operationId: Account.prototype.__get__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - Account
      summary: Creates a new instance in accessTokens of this model.
      operationId: Account.prototype.__create__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Account
      summary: Deletes all accessTokens of this model.
      operationId: Account.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Accounts/{id}/accessTokens/count':
    get:
      tags:
        - Account
      summary: Counts accessTokens of Account.
      operationId: Account.prototype.__count__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Accounts/{id}/todos':
    get:
      tags:
        - Account
      summary: Queries todos of Account.
      operationId: Account.prototype.__get__todos
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Todo'
      deprecated: false
    post:
      tags:
        - Account
      summary: Creates a new instance in todos of this model.
      operationId: Account.prototype.__create__todos
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Todo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Todo'
      deprecated: false
    delete:
      tags:
        - Account
      summary: Deletes all todos of this model.
      operationId: Account.prototype.__delete__todos
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Accounts/{id}/todos/count':
    get:
      tags:
        - Account
      summary: Counts todos of Account.
      operationId: Account.prototype.__count__todos
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Accounts:
    post:
      tags:
        - Account
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Account.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
    patch:
      tags:
        - Account
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Account.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
    put:
      tags:
        - Account
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Account.replaceOrCreate__put_Accounts
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
    get:
      tags:
        - Account
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Account.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Account'
      deprecated: false
  /Accounts/replaceOrCreate:
    post:
      tags:
        - Account
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Account.replaceOrCreate__post_Accounts_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  /Accounts/upsertWithWhere:
    post:
      tags:
        - Account
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Account.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  '/Accounts/{id}/exists':
    get:
      tags:
        - Account
      summary: Check whether a model instance exists in the data source.
      operationId: 'Account.exists__get_Accounts_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Accounts/{id}':
    head:
      tags:
        - Account
      summary: Check whether a model instance exists in the data source.
      operationId: 'Account.exists__head_Accounts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Account
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Account.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
    put:
      tags:
        - Account
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Account.replaceById__put_Accounts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
    delete:
      tags:
        - Account
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Account.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Account
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Account.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  '/Accounts/{id}/replace':
    post:
      tags:
        - Account
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Account.replaceById__post_Accounts_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  /Accounts/findOne:
    get:
      tags:
        - Account
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Account.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  /Accounts/update:
    post:
      tags:
        - Account
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Account.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Accounts/count:
    get:
      tags:
        - Account
      summary: Count instances of the model matched by where from the data source.
      operationId: Account.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Accounts/change-stream:
    post:
      tags:
        - Account
      summary: Create a change stream.
      operationId: Account.createChangeStream__post_Accounts_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Account
      summary: Create a change stream.
      operationId: Account.createChangeStream__get_Accounts_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Accounts/login:
    post:
      tags:
        - Account
      summary: Login a user with username/email and password.
      operationId: Account.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /Accounts/logout:
    post:
      tags:
        - Account
      summary: Logout a user with access token.
      operationId: Account.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Accounts/{id}/verify':
    post:
      tags:
        - Account
      summary: Trigger user's identity verification with configured verifyOptions
      operationId: Account.prototype.verify
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Accounts/confirm:
    get:
      tags:
        - Account
      summary: Confirm a user registration with identity verification token.
      operationId: Account.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Accounts/reset:
    post:
      tags:
        - Account
      summary: Reset password for a user with email.
      operationId: Account.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Accounts/change-password:
    post:
      tags:
        - Account
      summary: Change a user's password.
      operationId: Account.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Accounts/reset-password:
    post:
      tags:
        - Account
      summary: Reset user's password via a password-reset token.
      operationId: Account.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
tags:
  - name: Todo
  - name: TodoDetail
  - name: Account
consumes:
  - application/json
  - application/x-www-form-urlencoded
  - application/xml
  - text/xml
produces:
  - application/json
  - application/xml
  - text/xml
  - application/javascript
  - text/javascript
definitions:
  x-any:
    properties: {}
  TodoDetail:
    properties:
      Text:
        default: No content
        type: string
      status:
        default: false
        type: boolean
      id:
        type: number
        format: double
      todoId:
        type: number
        format: double
    additionalProperties: false
  Account:
    properties:
      firstName:
        type: string
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  Todo:
    properties:
      title:
        type: string
      subTitle:
        default: SHJDHSFS
        type: string
      id:
        type: number
        format: double
      accountId:
        type: number
        format: double
    required:
      - title
    additionalProperties: false
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
